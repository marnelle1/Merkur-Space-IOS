workflows:
  xcode-from-export:
    name: iOS from exported Xcode (Merspace + OneSignal)
    environment:
      groups:
        - app_store_credentials
        - certificate_credentials
      vars:
        IOS_DIR: "."
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_GROUP: "group.com.joams.merspace"
        APP_STORE_APPLE_ID: "6751573211"
        DEVELOPMENT_TEAM: "7LB2476AFZ"
      xcode: latest
      cocoapods: default

    scripts:
      - name: Check CERTIFICATE_PRIVATE_KEY format
        script: |
          echo "$CERTIFICATE_PRIVATE_KEY" | head -1 | grep -q "BEGIN RSA PRIVATE KEY" \
            || { echo "CERTIFICATE_PRIVATE_KEY must be PEM RSA (BEGIN RSA PRIVATE KEY)"; exit 1; }

      - name: Init keychain
        script: keychain initialize

      - name: Fetch signing files (App + NSE)
        script: |
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY

      - name: Import certs
        script: keychain add-certificates

      - name: Install CocoaPods
        script: |
          cd "$IOS_DIR"
          if [ -f "Podfile" ]; then
            pod repo update || true
            pod install
          else
            echo "ERROR: Podfile not found. Run EDM4U iOS Resolver → Resolve before exporting from Unity." >&2
            exit 1
          fi

      - name: Ensure App Group entitlement (main app)
        script: |
          cd "$IOS_DIR"
          ENT="Unity-iPhone/Unity-iPhone.entitlements"
          [ -f "$ENT" ] || touch "$ENT"
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups:0" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$ENT"
          /usr/libexec/PlistBuddy -c "Print" "$ENT" || true

      - name: Apply provisioning profiles
        script: |
          cd "$IOS_DIR"
          xcode-project use-profiles

      - name: Increment build number (by TestFlight)
        script: |
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$IOS_DIR"
          agvtool new-version -all $((LATEST + 1))

      # --- Fix for Xcode 15/16: disable traditional headermaps everywhere ---
      - name: Fix headermaps via xcodeproj (project + all targets)
        script: |
          cd "$IOS_DIR"
          ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj --no-document') || exit(1); end"
          ruby - <<'RUBY'
          require 'xcodeproj'
          proj = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          proj.build_configurations.each do |cfg|
            cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
            cfg.build_settings['USE_HEADERMAP'] = 'YES'
          end
          proj.targets.each do |t|
            t.build_configurations.each do |cfg|
              cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
              cfg.build_settings['USE_HEADERMAP'] = 'YES'
            end
          end
          proj.save
          RUBY

      - name: Verify headermap settings (App + NSE)
        script: |
          cd "$IOS_DIR"
          echo ">>> App build settings:"
          xcodebuild -project "$XCODE_PROJECT" -target "Unity-iPhone" -showBuildSettings | /usr/bin/grep -E 'ALWAYS_SEARCH_USER_PATHS|USE_HEADERMAP' || true
          echo ">>> NSE build settings:"
          xcodebuild -project "$XCODE_PROJECT" -target "OneSignalNotificationServiceExtension" -showBuildSettings | /usr/bin/grep -E 'ALWAYS_SEARCH_USER_PATHS|USE_HEADERMAP' || true

      - name: Clean Xcode build
        script: |
          cd "$IOS_DIR"
          if [ -d "$XCODE_WORKSPACE" ]; then
            xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME" -configuration Release clean
          else
            xcodebuild -project "$XCODE_PROJECT" -scheme "$XCODE_SCHEME" -configuration Release clean
          fi

      # ---------- РУЧНОЙ АРХИВ С ПОЛНЫМ ЛОГОМ ----------
      - name: Archive (verbose)
        script: |
          set -o pipefail
          cd "$IOS_DIR"
          ARCHIVE_PATH="$CM_BUILD_DIR/ios/xcarchive/Unity-iPhone.xcarchive"
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            archive | tee "$IOS_DIR/xcodebuild-archive.log"

      # ---------- СБОРКА exportOptions.plist НА ОСНОВЕ УСТАНОВЛЕННЫХ ПРОФИЛЕЙ ----------
      - name: Generate ExportOptions.plist (manual signing)
        script: |
          cd "$IOS_DIR"
          APP_PP_NAME=""
          NSE_PP_NAME=""
          TEAM="$DEVELOPMENT_TEAM"

          for p in "$HOME/Library/MobileDevice/Provisioning Profiles/"*.mobileprovision; do
            [ -e "$p" ] || continue
            PL=$(/usr/bin/security cms -D -i "$p")
            BID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<<"$PL" 2>/dev/null)
            NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<<"$PL" 2>/dev/null)
            [[ "$BID" == "$TEAM.$BUNDLE_ID" ]] && APP_PP_NAME="$NAME"
            [[ "$BID" == "$TEAM.$NSE_BUNDLE_ID" ]] && NSE_PP_NAME="$NAME"
          done

          echo "Using provisioning profiles:"
          echo "  App: $APP_PP_NAME"
          echo "  NSE: $NSE_PP_NAME"

          [ -n "$APP_PP_NAME" ] && [ -n "$NSE_PP_NAME" ] || { echo "ERROR: Could not find matching App Store profiles"; exit 1; }

          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>$DEVELOPMENT_TEAM</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key><string>$APP_PP_NAME</string>
              <key>$NSE_BUNDLE_ID</key><string>$NSE_PP_NAME</string>
            </dict>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF
          /usr/libexec/PlistBuddy -c "Print" ExportOptions.plist || true

      # ---------- ЭКСПОРТ IPA ----------
      - name: Export IPA
        script: |
          cd "$IOS_DIR"
          ARCHIVE_PATH="$CM_BUILD_DIR/ios/xcarchive/Unity-iPhone.xcarchive"
          EXPORT_PATH="$IOS_DIR/ipa_out"
          mkdir -p "$EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH" | tee "$IOS_DIR/xcodebuild-export.log"

    artifacts:
      - $IOS_DIR/ipa_out/*.ipa
      - $IOS_DIR/xcodebuild-archive.log
      - $IOS_DIR/xcodebuild-export.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
