workflows:
  xcode-from-export:
    name: iOS from exported Xcode (Merspace + OneSignal)
    environment:
      groups:
        - app_store_credentials
        - certificate_credentials
      vars:
        IOS_DIR: "."
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_GROUP: "group.com.joams.merspace"
        APP_STORE_APPLE_ID: "6751573211"
        DEVELOPMENT_TEAM: "7LB2476AFZ"
      xcode: latest
      cocoapods: default

    scripts:
      - name: Check CERTIFICATE_PRIVATE_KEY format
        script: |
          echo "$CERTIFICATE_PRIVATE_KEY" | head -1 | grep -q "BEGIN RSA PRIVATE KEY" \
            || { echo "CERTIFICATE_PRIVATE_KEY must be PEM RSA (BEGIN RSA PRIVATE KEY)"; exit 1; }

      - name: Init keychain
        script: keychain initialize

      - name: Fetch signing files (App + NSE)
        script: |
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY

      - name: Import certs
        script: keychain add-certificates

      - name: Install CocoaPods
        script: |
          cd "$IOS_DIR"
          if [ -f "Podfile" ]; then
            pod repo update || true
            pod install
          else
            echo "ERROR: Podfile not found. Run EDM4U iOS Resolver → Resolve before exporting from Unity." >&2
            exit 1
          fi

      # Добавляем App Group в главный таргет (подстраховка)
      - name: Ensure App Group entitlement (main app)
        script: |
          cd "$IOS_DIR"
          ENT="Unity-iPhone/Unity-iPhone.entitlements"
          [ -f "$ENT" ] || touch "$ENT"
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups:0" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$ENT"
          /usr/libexec/PlistBuddy -c "Print :com.apple.security.application-groups" "$ENT" || true

      # Обязательно пропишем App Group в NSE (и создадим .entitlements, если его не было)
      - name: Ensure App Group entitlement (NSE)
        script: |
          cd "$IOS_DIR"
          ENT_NSE=$(xcodebuild -project "$XCODE_PROJECT" -target "OneSignalNotificationServiceExtension" -showBuildSettings 2>/dev/null | awk -F'= ' '/CODE_SIGN_ENTITLEMENTS/ {print $2; exit}')
          if [ -z "$ENT_NSE" ]; then
            ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj --no-document') || exit(1); end"
            ruby - <<'RUBY'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
            t = proj.targets.find { |x| x.name == 'OneSignalNotificationServiceExtension' }
            raise 'NSE target not found' unless t
            t.build_configurations.each do |cfg|
              cfg.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'OneSignalNotificationServiceExtension/OneSignalNotificationServiceExtension.entitlements'
            end
            proj.save
            RUBY
            ENT_NSE="OneSignalNotificationServiceExtension/OneSignalNotificationServiceExtension.entitlements"
          fi
          echo "NSE entitlements path: $ENT_NSE"
          mkdir -p "$(dirname "$ENT_NSE")"
          [ -f "$ENT_NSE" ] || touch "$ENT_NSE"
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$ENT_NSE" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups:0" "$ENT_NSE" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$ENT_NSE"
          /usr/libexec/PlistBuddy -c "Print :com.apple.security.application-groups" "$ENT_NSE" || true

      - name: Apply provisioning profiles
        script: |
          cd "$IOS_DIR"
          xcode-project use-profiles

      # Fix для Xcode 15/16 — выключаем традиционные headermaps
      - name: Fix headermaps via xcodeproj (project + all targets)
        script: |
          cd "$IOS_DIR"
          ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj --no-document') || exit(1); end"
          ruby - <<'RUBY'
          require 'xcodeproj'
          proj = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          proj.build_configurations.each do |cfg|
            cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
            cfg.build_settings['USE_HEADERMAP'] = 'YES'
          end
          proj.targets.each do |t|
            t.build_configurations.each do |cfg|
              cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
              cfg.build_settings['USE_HEADERMAP'] = 'YES'
            end
          end
          proj.save
          RUBY

      # Выберем ИМЕННО те App Store-профили, где есть нужная App Group
      - name: Select matching App Store profiles (by App Group)
        script: |
          cd "$IOS_DIR"
          APP_PP_NAME=""; APP_PP_UUID=""
          NSE_PP_NAME=""; NSE_PP_UUID=""
          TEAM="$DEVELOPMENT_TEAM"
          for p in "$HOME/Library/MobileDevice/Provisioning Profiles/"*.mobileprovision; do
            [ -e "$p" ] || continue
            PL=$(/usr/bin/security cms -D -i "$p")
            AID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<<"$PL" 2>/dev/null)
            NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<<"$PL" 2>/dev/null)
            UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<<"$PL" 2>/dev/null)
            GRP=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:com.apple.security.application-groups' /dev/stdin <<<"$PL" 2>/dev/null || true)
            if [[ "$AID" == "$TEAM.$BUNDLE_ID" ]] && [[ "$GRP" == *"$APP_GROUP"* ]]; then APP_PP_NAME="$NAME"; APP_PP_UUID="$UUID"; fi
            if [[ "$AID" == "$TEAM.$NSE_BUNDLE_ID" ]] && [[ "$GRP" == *"$APP_GROUP"* ]]; then NSE_PP_NAME="$NAME"; NSE_PP_UUID="$UUID"; fi
          done
          echo "Selected profiles:"
          echo "  App: $APP_PP_NAME ($APP_PP_UUID)"
          echo "  NSE: $NSE_PP_NAME ($NSE_PP_UUID)"
          [ -n "$APP_PP_UUID" ] && [ -n "$NSE_PP_UUID" ] || { echo "ERROR: Matching App Store profiles with App Group '$APP_GROUP' not found. Recreate profiles for both App IDs."; exit 1; }
          echo "APP_PP_NAME=$APP_PP_NAME" >> $CM_ENV
          echo "NSE_PP_NAME=$NSE_PP_NAME" >> $CM_ENV
          echo "APP_PP_UUID=$APP_PP_UUID" >> $CM_ENV
          echo "NSE_PP_UUID=$NSE_PP_UUID" >> $CM_ENV

      - name: Clean Xcode build
        script: |
          cd "$IOS_DIR"
          if [ -d "$XCODE_WORKSPACE" ]; then
            xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME" -configuration Release clean
          else
            xcodebuild -project "$XCODE_PROJECT" -scheme "$XCODE_SCHEME" -configuration Release clean
          fi

      - name: Archive (verbose, with explicit profiles)
        script: |
          set -o pipefail
          cd "$IOS_DIR"
          ARCHIVE_PATH="$CM_BUILD_DIR/ios/xcarchive/Unity-iPhone.xcarchive"
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            "PROVISIONING_PROFILE_SPECIFIER=$APP_PP_UUID" \
            "OneSignalNotificationServiceExtension.PROVISIONING_PROFILE_SPECIFIER=$NSE_PP_UUID" \
            | tee "$IOS_DIR/xcodebuild-archive.log"

      - name: Generate ExportOptions.plist
        script: |
          cd "$IOS_DIR"
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>$DEVELOPMENT_TEAM</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key><string>$APP_PP_NAME</string>
              <key>$NSE_BUNDLE_ID</key><string>$NSE_PP_NAME</string>
            </dict>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF
          /usr/libexec/PlistBuddy -c "Print" ExportOptions.plist || true

      - name: Export IPA
        script: |
          cd "$IOS_DIR"
          ARCHIVE_PATH="$CM_BUILD_DIR/ios/xcarchive/Unity-iPhone.xcarchive"
          EXPORT_PATH="$IOS_DIR/ipa_out"
          mkdir -p "$EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH" | tee "$IOS_DIR/xcodebuild-export.log"

    artifacts:
      - $IOS_DIR/ipa_out/*.ipa
      - $IOS_DIR/xcodebuild-archive.log
      - $IOS_DIR/xcodebuild-export.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
