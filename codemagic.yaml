workflows:
  xcode-from-export:
    name: iOS from exported Xcode (Merspace + OneSignal)
    environment:
      groups:
        - app_store_credentials
        - certificate_credentials
      vars:
        IOS_DIR: "."
        XCODE_WORKSPACE: "Unity-iPhone.xcworkspace"
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        BUNDLE_ID: "com.joams.merspace"
        NSE_BUNDLE_ID: "com.joams.merspace.OneSignalNotificationServiceExtension"
        APP_GROUP: "group.com.joams.merspace"
        APP_STORE_APPLE_ID: "6751573211"
      xcode: latest
      cocoapods: default

    scripts:
      - name: Check CERTIFICATE_PRIVATE_KEY format
        script: |
          echo "$CERTIFICATE_PRIVATE_KEY" | head -1 | grep -q "BEGIN RSA PRIVATE KEY" \
            || { echo "CERTIFICATE_PRIVATE_KEY must be PEM RSA (BEGIN RSA PRIVATE KEY)"; exit 1; }

      - name: Init keychain
        script: keychain initialize

      - name: Fetch signing files (App + NSE)
        script: |
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY
          app-store-connect fetch-signing-files "$NSE_BUNDLE_ID" \
            --type IOS_APP_STORE --platform=IOS --create \
            --certificate-key @env:CERTIFICATE_PRIVATE_KEY

      - name: Import certs
        script: keychain add-certificates

      - name: Install CocoaPods
        script: |
          cd "$IOS_DIR"
          if [ -f "Podfile" ]; then
            pod repo update || true
            pod install
          else
            echo "ERROR: Podfile not found. Run EDM4U iOS Resolver â†’ Resolve before exporting from Unity." >&2
            exit 1
          fi

      - name: Ensure App Group entitlement (main app)
        script: |
          cd "$IOS_DIR"
          ENT="Unity-iPhone/Unity-iPhone.entitlements"
          [ -f "$ENT" ] || touch "$ENT"
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups:0" "$ENT" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$ENT"
          /usr/libexec/PlistBuddy -c "Print" "$ENT" || true

      - name: Apply provisioning profiles
        script: |
          cd "$IOS_DIR"
          xcode-project use-profiles

      - name: Increment build number (by TestFlight)
        script: |
          LATEST=$(app-store-connect get-latest-testflight-build-number "$APP_STORE_APPLE_ID" || echo 0)
          cd "$IOS_DIR"
          agvtool new-version -all $((LATEST + 1))

      # Fix traditional headermap usage for Xcode 15/16 (project + all targets, incl. OneSignal NSE)
      - name: Fix headermaps via xcodeproj (project + all targets)
        script: |
          cd "$IOS_DIR"
          ruby -e "begin; require 'xcodeproj'; rescue LoadError; system('gem install xcodeproj --no-document') || exit(1); end"
          ruby - <<'RUBY'
          require 'xcodeproj'
          proj = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          proj.build_configurations.each do |cfg|
            cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
            cfg.build_settings['USE_HEADERMAP'] = 'YES'
          end
          proj.targets.each do |t|
            t.build_configurations.each do |cfg|
              cfg.build_settings['ALWAYS_SEARCH_USER_PATHS'] = 'NO'
              cfg.build_settings['USE_HEADERMAP'] = 'YES'
            end
          end
          proj.save
          RUBY

      - name: Verify headermap settings (NSE target)
        script: |
          cd "$IOS_DIR"
          echo ">>> NSE build settings:"
          xcodebuild -project "$XCODE_PROJECT" -target "OneSignalNotificationServiceExtension" -showBuildSettings | \
            /usr/bin/grep -E 'ALWAYS_SEARCH_USER_PATHS|USE_HEADERMAP' || true

      - name: Build ipa
        script: |
          cd "$IOS_DIR"
          if [ -d "$XCODE_WORKSPACE" ]; then
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
          else
            xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"
          fi

    artifacts:
      - $IOS_DIR/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
